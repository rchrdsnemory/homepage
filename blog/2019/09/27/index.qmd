---
title: 'Predicting t-shirt size from height and weight'
date: 2019-09-27
description: "Using body measurement data from the National Health and Nutrition Examination Survey (NHANES), I created a model that predicts Gildan t-shirt sizes from height and weight."
image: gildan_unisex_size_chart.png
twitter-card:
  image: "gildan_unisex_size_chart.png"
open-graph:
  image: "gildan_unisex_size_chart.png"
categories:
  - machine-learning
  - R
freeze: true
---

Today I was given a task that sounded pretty straight-forward: What t-shirt size would you send to someone if you don't know their shirt size, but instead you know their height, weight, and gender? 

In fact, it seemed *so straight-forward* that I was sure there must be prior art out there that I could re-use. A StackOverflow, a mathematical formula, a GitHub repo, a blog post -- there had to be something! To my surprise, there wasn't any, not that I could find anyway. 

I guess this is a problem that hasn't received a lot of attention. Or at least, it's not the sort of problem that someone in the open source / open science community has tackled.

So I set out to build my own predictive algorithm. 

# The model and the data

First I would need to model the problem and identify data to build the model. What are the inputs and the outputs? How do the inputs map onto the outputs?

I knew that the only information I'd have to predict shirt sizes from was: gender, height and weight. Sometimes I'd have body mass index (BMI) instead of height and weight.

I also knew that I'd be sending "unisex" t-shirts. I've done my share of online t-shirt shopping, so it occurred to me to look at how online clothing stores solve this problem -- enter the "size chart". Okay, so now I'd found a measurement that could be used to classify shirt sizes: **chest size**.

![](gildan_unisex_size_chart.png)

So now I just had to find a way to get from gender, height, and weight to chest size.

I know from experience that there are several large public datasets that contain health and health-related measurements. One of these is the [The National Health and Nutrition Examination Survey (NHANES)](https://www.cdc.gov/nchs/nhanes), which is run by the CDC. I decided to poke around there and see what I could find. I found the [variable search tool](https://wwwn.cdc.gov/nchs/nhanes/Search/default.aspx) and started keying in some of these variables: "height", "weight", "chest", "bmi", "gender".

Of course they would have gender, height, weight and BMI. It would be a pretty odd health and nutrition study if they didn't have basic demographics and measurements. But chest measurement? The context seemed a bit odd. What does chest circumference have to do with health and nutrition?

Maybe chest circumference is important if we're talking about breathing? Eureka! NHANES does have chest measurements for inhalation and exhalation as part of the arthritis datasets!

The final piece of the puzzle was identifying a single year cohort that contained all of these measures together, because I would want the data to be at the level of individual persons. I found all of these measurements were contained in the [2009-2010 cohort](https://wwwn.cdc.gov/nchs/nhanes/Search/DataPage.aspx?Component=Examination&CycleBeginYear=2009), so I downloaded the dataset files for that cohort.

![](nhanes_chest.png)

Now my model was complete. I would run a linear regression that predicts chest circumference from gender, height and weight (or bmi). I would train this model on the NHANES data, and I would then use the predicted chest circumference to determine shirt size.

# Data wrangling

## Read in the data

Of course the data had to be in a SAS format. ðŸ™„

Luckily there's an R package for reading SAS data files.

```{r, warning = FALSE, message = FALSE}
library(foreign)
library(tidyverse)
library(MASS)

a <- read.xport("ARX_F.XPT") # Arthritis data
b <- read.xport("BMX_F.XPT") # Body measurements
d <- read.xport("DEMO_F.XPT") # Demographics
```

These are the variables I'll pull out from the different dataframes.

- SEQN - Participant ID
- ARXCCIN - Inhale chest circumference in CM
- BMXWT - Weight in KG
- BMXHT - Height in CM
- BMXBMI - Body Mass Index (BMI)
- DMDHRGND - Gender of participant (1 = Male, 2 = Female)

I'm using the inhale chest circumference because I found in some exploratory analyses (not reported here) that it has a stronger correlation to the other measurements. I guess the exhale circumference was more noisy for some reason?

```{r}
a %>% dplyr::select(id = SEQN, chest_in_cm = ARXCCIN) -> chest_measures
b %>% dplyr::select(id = SEQN, weight_kg = BMXWT, height_cm = BMXHT, bmi = BMXBMI) -> height_weight
d %>% dplyr::select(id = SEQN, gender = DMDHRGND) %>%
  mutate(gender = case_when(gender == 1 ~ "M", TRUE ~ "F")) -> gender

# Join datasets and select only the rows that have all measurements
chest_measures %>%
  left_join(., height_weight, by = c('id')) %>%
  left_join(., gender, by = c('id')) %>%
  filter(!is.na(chest_in_cm),
         !is.na(height_cm), 
         !is.na(weight_kg),
         !is.na(gender), 
         !is.na(bmi)) -> df
```

# Correlations

I'll check some basic correlations and descriptives. I see that men have larger chests than women, on average. And importantly, BMI does not correlate with chest size as well as weight.

```{r}
cor(df$weight_kg, df$chest_in_cm)
cor(df$height_cm, df$chest_in_cm)
cor(df$bmi, df$chest_in_cm)

df %>%
  group_by(gender) %>%
  summarize(mean = mean(chest_in_cm))
```

# Model building

I decided to build two models because sometimes I know a person's height and weight but not their BMI, and other times I know their BMI but not their height and weight. 

Although I could take all of the heights and weights and convert them into BMIs, I'm guessing this could lead a loss of information. The correlation above suggests that weight is the best predictor of chest size (better than BMI), so that tells me it might be better to use height and weight when it's available, but use BMI as a fallback when height and weight are not available.

## Height and weight model

To build a model, I'll run a stepwise linear regression to determine the model of best fit. I'll enter height, weight, and gender as predictors and allow interaction terms. I'll use AIC (Akaike's Information Criterion) for model selection, since it penalizes models with added complexity and I want a parsimonious model that doesn't overfit the data. 

I see that the best model includes all terms, including `weight*height` and `weight*gender` interaction terms.

```{r}
lm(data = subset(df, select= c(chest_in_cm, height_cm, weight_kg, gender)), 
   chest_in_cm ~ .) -> mod
step.model <- stepAIC(mod, direction = "both", trace = TRUE, scope = . ~ .^2)
summary(step.model)

# Save the model for later
height_weight_model <- step.model
```

## Body Mass Index (BMI) model

Now I'll do the same with BMI and gender.

```{r}
lm(data = subset(df, select= c(chest_in_cm, bmi, gender)), chest_in_cm ~ .) -> mod
step.model <- stepAIC(mod, direction = "both", trace = TRUE, scope = . ~ .^2)
summary(step.model)

# Save the model for later
bmi_model <- step.model
```

# Predicting chest size from height, weight, BMI, and gender

Now that I have the models, I can use them to generate chest size predictions.


## Predict chest size given height, weight, and gender

Next we'll take the final model selected from the above procedure and use it to predict chest circumference, in inches, given height, weight, and gender.

To test the model, I'll use average values.

```{r}
mean(df$weight_kg)
mean(df$height_cm)
mean(df$bmi)
```


### Height, weight, and gender

```{r}
input <- data.frame(height_cm = 168, weight_kg = 83, gender = "F")

# 1 cm = 0.393701 inches
predict(height_weight_model, input) * 0.393701
```

### BMI and gender

```{r}
input <- data.frame(bmi = 29, gender = "F")
predict(bmi_model, input) * 0.393701
```


## Chest size to shirt size

Finally, I'll need to take the chest size prediction and convert it to a shirt size. Remember the size chart? 

![](gildan_unisex_size_chart.png)

For some reason the chart leaves out "XS" and the ranges lso don't provide full coverage of the possible chest size values (34-36" and then 38-40"???). So I'll extend the upper bound of each range to meet the lower bound of each size above it. This will cause the predictions to err on the size of larger sizes rather than smaller sizes, which I think is better because if a shirt is too big, at least you can still wear it!

```{r}
input <- data.frame(height_cm = 168, weight_kg = 83, gender = "F")

data.frame(chest = predict(height_weight_model,input)[[1]] * 0.393701) %>%
  mutate(shirt_size = case_when(
          chest < 32 ~ "XS",
          between(chest, 32, 36) ~ "S",
          between(chest, 36, 40) ~ "M",
          between(chest, 40, 44) ~ "L",
          between(chest, 44, 48) ~ "XL",
          between(chest, 48, 52) ~ "2XL",
          between(chest, 52, 56) ~ "3XL",
          between(chest, 56, 64) ~ "4XL",
          chest > 64 ~ "5XL"
    )
)
```

# Wrapping it up in a function

And finally, I can put it in a function that will select the model to use for me, based on the information it's been given.

```{r}
predict_shirt_size <- function(height_cm, weight_kg, bmi, gender){
  
  if(!is.na(height_cm) & !is.na(weight_kg)){
    input <- data.frame(height_cm = height_cm, weight_kg = weight_kg, gender = gender)
    chest <- predict(height_weight_model, input)[[1]] * 0.393701
  } else if(!is.na(bmi)){
    input <- data.frame(bmi = bmi, gender = gender)
    chest <- predict(bmi_model, input)[[1]] * 0.393701
  } else {
    # Just in case height, weight, and BMI are all missing
    chest <- -99 # A value that gets ignored below
  }
  
  shirt_size = case_when(
              between(chest, 0, 32) ~ "XS",
              between(chest, 32, 36) ~ "S",
              between(chest, 36, 40) ~ "M",
              between(chest, 40, 44) ~ "L",
              between(chest, 44, 48) ~ "XL",
              between(chest, 48, 52) ~ "2XL",
              between(chest, 52, 56) ~ "3XL",
              between(chest, 56, 64) ~ "4XL",
              chest > 64 ~ "5XL",
              
              # Defaults in case height, weight, BMI are missing
              # but gender is not
              gender == "F" ~ "M",
              gender == "M" ~ "L",
              
              # Last resort
              TRUE ~ "L"
            )
  
  return(shirt_size)
}
```

```{r}
predict_shirt_size(height_cm = 168, weight_kg = 83, gender = "F")
```



