{
  "hash": "acda7aa8ee2b6af2b8eaaceb884c227b",
  "result": {
    "markdown": "---\ntitle: 'Using data normalization to better compare change over time in regions with different population sizes'\ndate: 2023-08-25\ndescription: \"I use data normalization to better compare the changes in refugee outflows in different regions from 2010 to 2022. Four regions are identified with large increases over their 2010 baseline.\"\nimage: social-image.png\ntwitter-card:\n  image: \"social-image.png\"\nopen-graph:\n  image: \"social-image.png\"\ncategories:\n  - tidy-tuesday\n  - data-visualization\n  - data-normalization\n---\n\n\nFor this post, I'll be using the Week 34 [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) dataset, which contains data on refugee movement around the world. I want to look at the change in refugee outflows over time in different nations, and see if I can identify countries with meaningfully large increases in refugee outflows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(wbstats)\nlibrary(gghighlight)\ndf <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-22/population.csv')\n```\n:::\n\n\n# Data cleaning\n\nFirst, some data cleaning. \n\nTo keep things simple, I'm only going to keep nations that had refugee data for all of the 13 years spanning 2010-2022.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df %>%\n  group_by(coo_name) %>%\n  summarize(n_years = n_distinct(year)) %>%\n  filter(n_years == 13))$coo_name -> coo_to_keep\n\ndf %>%\n  filter(coo_name %in% coo_to_keep) %>%\n  select(coo_name,\n         coo_iso,\n         year,\n         refugees) -> df_clean\n```\n:::\n\n\n# Normalization\n\nNext, to make comparisons between nations more apples-apples, I'm going to do some normalization. \n\nI want to normalize in terms of population size and change over baseline.\n\nFirst, I'll fetch population data from World Bank using `wbstats`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_search(\"SP.POP.TOTL\", fields='indicator_id') %>%\n  head(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  indicator_id indicator         indicator_desc                                 \n  <chr>        <chr>             <chr>                                          \n1 SP.POP.TOTL  Population, total Total population is based on the de facto defi…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npops <- wb_data(\"SP.POP.TOTL\", start_date = 2010, end_date = 2022) %>%\n  select(iso3c, date, \"SP.POP.TOTL\") %>%\n  rename(pop = \"SP.POP.TOTL\",\n         iso = iso3c)\n\ndf_clean %>%\n  left_join(pops, by=c('coo_iso'='iso', 'year'='date')) -> df_enriched\n\ndf_enriched %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  coo_name               coo_iso  year refugees        pop\n  <chr>                  <chr>   <dbl>    <dbl>      <dbl>\n1 Afghanistan            AFG      2010        0   28189672\n2 Iran (Islamic Rep. of) IRN      2010       30   75373855\n3 Iraq                   IRQ      2010        6   31264875\n4 Pakistan               PAK      2010     6398  194454498\n5 Egypt                  EGY      2010        5   87252413\n6 China                  CHN      2010        6 1337705000\n```\n:::\n:::\n\n\nNext, I'll compute a new variable: `refugees_per_1k_pop` that represents refugees leaving per 1000 persons in the original population. This is a good way to normalize, because we'd expect a larger count of refugees leaving from countries that had more people to begin with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_enriched %>%\n  group_by(year, coo_name, coo_iso) %>%\n  summarize(refugees = sum(refugees),\n            pop = first(pop)) %>%\n  mutate(refugees_per_1k_pop = refugees/(pop/1000)) -> df_enriched\n\ndf_enriched %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n# Groups:   year, coo_name [6]\n   year coo_name            coo_iso refugees      pop refugees_per_1k_pop\n  <dbl> <chr>               <chr>      <dbl>    <dbl>               <dbl>\n1  2010 Afghanistan         AFG      3054699 28189672            108.    \n2  2010 Albania             ALB        14771  2913021              5.07  \n3  2010 Algeria             DZA         6665 35856344              0.186 \n4  2010 Angola              AGO       134851 23364185              5.77  \n5  2010 Antigua and Barbuda ATG           28    85695              0.327 \n6  2010 Argentina           ARG          553 40788453              0.0136\n```\n:::\n:::\n\n\nI'll do a bit of cleaning again, to remove those nations for whom I didn't have a complete record of population data, and so couldn't calculate `refugees_per_1k_pop` for every year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df_enriched %>%\n  group_by(coo_name) %>%\n  summarize(n_years = sum(refugees_per_1k_pop > 0, na.rm=T)) %>%\n  filter(n_years == 13))$coo_name -> coo_to_keep_2\n\ndf_enriched %>%\n  filter(coo_name %in% coo_to_keep_2)-> df_enriched_clean\n```\n:::\n\n\n\nNext, I'll use 2010 as a baseline year, and subtract each year's value from that. This will allow me to measure change over time from this common baseline, and compare nations in terms of a normalized change.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_enriched_clean %>%\n  filter(year == 2010) %>%\n  group_by(coo_name) %>%\n  summarize(baseline_refugees_per_1k_pop = sum(refugees)/(first(pop)/1000)) -> baseline_year\n\ndf_enriched_clean %>%\n  left_join(baseline_year, by='coo_name') %>%\n  mutate(change_from_baseline = refugees_per_1k_pop - baseline_refugees_per_1k_pop) -> df_enriched_clean\n\ndf_enriched_clean %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n# Groups:   year, coo_name [6]\n   year coo_name            coo_iso refugees      pop refugees_per_1k_pop\n  <dbl> <chr>               <chr>      <dbl>    <dbl>               <dbl>\n1  2010 Afghanistan         AFG      3054699 28189672            108.    \n2  2010 Albania             ALB        14771  2913021              5.07  \n3  2010 Algeria             DZA         6665 35856344              0.186 \n4  2010 Angola              AGO       134851 23364185              5.77  \n5  2010 Antigua and Barbuda ATG           28    85695              0.327 \n6  2010 Argentina           ARG          553 40788453              0.0136\n# ℹ 2 more variables: baseline_refugees_per_1k_pop <dbl>,\n#   change_from_baseline <dbl>\n```\n:::\n:::\n\n\n# Identifying regions of interest\n\nNext, I want to identify a smaller set of \"interesting\" COOs that have experienced large increases over the baseline. I'll identify an upper bound percentile of max change over baseline, and then I'll use a value that approximates that as a filter. This gives me 4 \"interesting\" nations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_enriched_clean %>%\n  group_by(coo_name) %>%\n  summarize(max_change_from_baseline = max(change_from_baseline)) %>%\n  summarize(p90_change = quantile(max_change_from_baseline, .975, na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  p90_change\n       <dbl>\n1       30.0\n```\n:::\n\n```{.r .cell-code}\ndf_enriched_clean %>%\n  group_by(coo_name, coo_iso) %>%\n  summarize(max_change_from_baseline = max(change_from_baseline),\n            last_value = last(change_from_baseline, order_by=year)) %>%\n  filter(max_change_from_baseline > 32) -> coos_with_large_changes_over_baseline\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'coo_name'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\ncoos_with_large_changes_over_baseline\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n# Groups:   coo_name [4]\n  coo_name             coo_iso max_change_from_baseline last_value\n  <chr>                <chr>                      <dbl>      <dbl>\n1 Central African Rep. CAF                         99.8       98.7\n2 Eritrea              ERI                         76.9       67.3\n3 Syrian Arab Rep.     SYR                        343.       295. \n4 Ukraine              UKR                        149.       149. \n```\n:::\n:::\n\n\n# Data visualization\n\nFinally, I'll plot change over the 2010 baseline (in refugees per 1k population), and highlight the 4 interesting nations identified above.\n\nI'll use this to help me pick colors for the `ggtitle` text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscales::show_col(scales::hue_pal()(4))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_enriched_clean %>%\n  mutate(class = coo_name %in% coos_with_large_changes_over_baseline$coo_name,\n         year = as.Date(paste0(as.character(year), '-01-01'))) %>%\n  arrange(year, desc(class)) %>%\n  mutate(coo_iso = fct_inorder(coo_iso)) %>%\n  ggplot(aes(x=year, y=change_from_baseline, color=coo_iso)) +\n    geom_line() +\n    scale_x_date(date_labels=\"%Y\", date_breaks=\"1 year\") +\n    ggthemes::theme_solarized() +\n    gghighlight::gghighlight(class == TRUE) +\n    ggtitle(\"<strong><span style='color:#00BFC4'>SYR</span></strong>, <strong><span style='color:#C77CFF'>UKR</span></strong>, <strong><span style='color:#F8766D'>CAF</span></strong>, and <strong><span style='color:#7CAE00'>ERI</span></strong> experienced large increases in<br>normalized refugee outflow (i.e., refugees per 1k population),<br> compared to their 2010 baseline.\") +\n    xlab('Year') +\n    ylab('Change in Normalized Refugee Outflow*') +\n    labs(caption = \"<span style='font-size:7pt'>*Change in refugees per 1k population from the baseline value observed in 2010.</span>\") +\n    theme(plot.title = ggtext::element_markdown(),\n          plot.caption = ggtext::element_markdown()) -> plot\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Tried to calculate with group_by(), but the calculation failed.\nFalling back to ungrouped filter operation...\n```\n:::\n\n```{.r .cell-code}\nplot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}